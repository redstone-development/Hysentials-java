//file:noinspection UnnecessaryQualifiedReference
//file:noinspection GroovyAssignabilityCheck


plugins {
//    id "dev.architectury.architectury-pack200" version "0.1.3"
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'
    id "cc.polyfrost.loom" version "0.10.0.5"
    id "net.kyori.blossom" version "1.3.1"
    id "java"
    id 'maven-publish'
}

long time = System.currentTimeSeconds()
boolean dev = dev == "true"
version = (dev ? dev_version + time : mod_version)
group = "net.sinender"
archivesBaseName = mod_name

blossom {
    String className = "src/main/java/llc/redstone/hysentials/Hysentials.java"
    replaceToken("@VER@", project.version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)

    System.out.println("Replaced tokens: " + getTokenReplacementsByFile())
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "cc.polyfrost.oneconfig.loader.stage0.LaunchWrapperTweaker")
            arg("--release", "8")
            property("onecore.mixin", "mixins.hysentials.json")

            property("mixin.debug.export", "true")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
        mixinConfig("mixins.hysentials.json")
        mixin.defaultRefmapName.set("mixins.hysentials.refmap.json")
        accessTransformer(file("src/main/resources/hysentials_at.cfg"))
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.polyfrost.cc/releases' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.essential.gg/repository/maven-public' }
    maven { url 'https://repo.hypixel.net/repository/Hypixel/' }
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")

    compileOnly('cc.polyfrost:oneconfig-1.8.9-forge:0.2.1-alpha184')
    include('cc.polyfrost:oneconfig-wrapper-launchwrapper:1.0.0-beta+')
    include("org.java-websocket:Java-WebSocket:1.5.3")
    include('org.reflections:reflections:0.10.2')
    include('org.json:json:20231013')
    include('org.slick2d:slick2d-core:1.0.2') {
        exclude module: 'lwjgl'
    }
    include('com.github.JnCrMx:discord-game-sdk4j:v0.5.5')
    include('com.neovisionaries:nv-websocket-client:2.14')
    include('com.github.MinnDevelopment:java-discord-rpc:v2.0.2')
    include('net.hypixel:mod-api:0.3.1')

    compileOnly('org.spongepowered:mixin:0.7.+')

    compileOnly("me.djtheredstoner:DevAuth-forge-legacy:1.1.0")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "name", mod_name
    inputs.property "id", mod_id

    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

sourceSets {
    dummy {

    }
    main {
        compileClasspath += dummy.output
        output.resourcesDir = java.classesDirectory
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
        // other options...
    }
}

jar {
    dependsOn configurations.include
    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            'FMLAT': "hysentials_at.cfg",
            'MixinConfigs': ["mixins.hysentials.json"],
            "TweakOrder": "0",
            'TweakClass': "cc.polyfrost.oneconfig.loader.stage0.LaunchWrapperTweaker"
    )
    //set the destination directory to be the desktop for easy testing
}

remapJar {
    archiveFileName.set("${mod_name}-${mod_version}.jar")
    destinationDirectory = file("C:\\Users\\griff\\Desktop\\games\\MultiMC\\instances\\1.8.9\\.minecraft\\mods")
}

publishing {
    repositories {
        if (dev) {
            maven {
                name = "devRepo"
                url = "https://repo.redstone.llc/dev"
                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
        } else {
            maven {
                name = "betaRepo"
                url = "https://repo.redstone.llc/beta"
                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "llc.redstone"
            artifactId = mod_name
            version = version
            from components.java
        }
    }
}
